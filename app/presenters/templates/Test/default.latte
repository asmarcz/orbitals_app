{block style}
	<style>
		#check-input {
			background-color: #282828;
			border-radius: 10px;
			border: 4px solid rgb(107, 110, 115);
			color: #fff;
			text-indent: 0.5em;
		}
	</style>
{/block}

{block content}
	<div id="app">
		<form id="calc-form" @submit.prevent="check">
			<div class="row justify-content-center">
				<div class="col-12 text-center">
					Test this out!
				</div>
				<div class="col-7 col-md-6 col-lg-4 mt-2">
					<input v-model.number="inputNumber" @focus="$event.target.select()" id="calc-input" class="w-100" type="number"
						   placeholder="Proton number...">
				</div>
				<div class="col-5 col-md-4 col-lg-3 mt-2">
					<select v-model="inputNumber" ref="elementSelect" id="calc-select" class="w-100 h-100">
						<option value="">Z</option>
						<option v-for="element in elements" :value="element[0]">{{ element[1] }}</option>
					</select>
				</div>
			</div>
			<div class="row	mt-3 justify-content-center">
				<div class="col-12 text-center">
					Fill in the short configuration:
				</div>
				<div class="col-12 col-md-10 col-lg-7 mt-2">
					<input v-model="inputData" id="check-input" type="text" class="w-100 p-1" placeholder="4s2, 4p3, ...">
				</div>
			</div>
			<div class="row justify-content-center">
				<div class="col-12 col-md-10 col-lg-7 mt-2">
					<input id="calc-submit" type="submit" class="w-100 p-1" value="Check">
				</div>
			</div>
		</form>
		<div v-if="protonNumber" class="row text-center">
			<div v-if="isCorrect" class="col-12">
				You are correct!
			</div>
			<div v-else class="col-12">
				You are incorrect!
			</div>
		</div>
	</div>
{/block}

{block script}
	<script>
		var app = new Vue({
			el: '#app',
			data() {
				return {
					inputNumber: '',
					protonNumber: 0,
					inputData: '',
					isCorrect: true,
				}
			},
			computed: {
				orbitals: function () {
					let element = new Element(this.protonNumber)
					let mainQuantum = new QuantumLayer(1)
					let controller = new Controller(element, mainQuantum, exceptions)
					controller.initiate()
					controller.checkExceptions()
					return element.orbitals.filter(orbital => orbital.electronNumber > 0)
				},
				shortOrbitals: function () {
					let lastNobleGas
					for (let i = nobleGases.length - 1; i >= 0; i--) {
						if (nobleGases[i] < this.protonNumber) {
							lastNobleGas = nobleGases[i]
						}
					}
					let seekedLayer = 1 + (typeof lastNobleGas === 'undefined' ? 0 : layers.findIndex(array => array.includes(this.protonNumber)))
					return this.orbitals.filter(function (orbital) {
						if (orbital.n === seekedLayer && (orbital.type === 0 || orbital.type === 1)) {
							return true
						} else if (orbital.n === seekedLayer - 1 && orbital.type === 2) {
							return true
						} else if (orbital.n === seekedLayer - 2 && orbital.type === 3) {
							return true
						} else {
							return false
						}
					})
				},
			},
			methods: {
				check: function () {
					if (this.inputNumber < 1 || this.inputNumber > maxProtonNumber) {
						alert(`Proton number must be bigger than 0 and smaller than ${ maxProtonNumber + 1 }.`)
					} else if (this.inputNumber !== Math.floor(this.inputNumber)) {
						alert('Proton number must be an integer not a float.')
					} else {
						this.protonNumber = this.inputNumber
						this.isCorrect = true
						let temp = this.inputData.replace(/\s/g,'').split(',')
						for (let i = 0; i < temp.length; i++) {
							if (temp[i][0] != this.shortOrbitals[i].n || temp[i][1] != getOrbitalTypeText(this.shortOrbitals[i].type) || temp[i][2] != this.shortOrbitals[i].electronNumber) {
								this.isCorrect = false
							}
						}
					}
				}
			}
		})
	</script>
{/block}
