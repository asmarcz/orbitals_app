{block style}
	<style>
		#calc-input, #calc-select {
			background-color: #282828;
			border-radius: 10px;
			border: 4px solid rgba(173, 181, 189, 0.5);
			color: #fff;
			text-indent: 0.5em;
		}

		#calc-submit {
			background-color: #282828;
			border: 4px solid rgba(173, 181, 189, 0.5);
			color: #fff;
		}

		#orbitals-table {
			background-color: rgba(52, 58, 64, 0.7);
			color: #fff;
			border-collapse: separate;
			overflow: auto;
		}

		#orbitals-table td, th {
			border: 5px solid;
			border-image: linear-gradient(0deg, rgba(0, 0, 0, 1) 0%, rgba(134, 134, 134, 1) 50%, rgba(0, 0, 0, 1) 100%) 35%;
		}
	</style>
{/block}

{block content}
	<div id="app">
		<div class="row justify-content-center">
			<div class="col-12 text-center">
				Check this out!
			</div>
			<div class="col-12 col-md-6 col-lg-4 mt-2">
				<input v-model.number="inputNumber" id="calc-input" class="w-100" type="number"
					   placeholder="Proton number...">
			</div>
			<div class="col-4 col-md-4 col-lg-3 mt-2">
				<select v-model="inputNumber" id="calc-select" class="w-100 h-100">
					<option value="">Z</option>
					<option v-for="element in elements" v-bind:value="element[0]">{{ element[1] }}</option>
				</select>
			</div>
			<div class="col-8 col-md-4 col-lg-3 mt-2">
				<button @click="calculate" id="calc-submit" class="w-100">Calculate</button>
			</div>
		</div>
		<div v-if="show" class="row mt-3">
			<div class="col-12">
				<table id="orbitals-table" class="w-100 text-center">
					<thead>
					<tr>
						<th>
							<span class="d-sm-none">Q#</span>
							<span class="d-none d-sm-inline d-md-none">Quantum #</span>
							<span class="d-none d-md-inline">Quantum number</span>
						</th>
						<th>Type</th>
						<th>Electrons</th>
					</tr>
					</thead>
					<tbody>
					<tr v-for="orbital in orbitals">
						<td>{{ orbital.n }}</td>
						<td>{{ getOrbitalTypeText(orbital.type) }}</td>
						<td>{{ orbital.electronNumber }}</td>
					</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
{/block}

{block script}
	<script>
		sortElements()
		var app = new Vue({
			el: '#app',
			data: {
				inputNumber: "",
				protonNumber: 0,
				show: false
			},
			computed: {
				orbitals: function () {
					let element = new Element(this.protonNumber)
					let mainQuantum = new QuantumLayer(1)
					let controller = new Controller(element, mainQuantum, exceptions)
					controller.initiate()
					controller.checkExceptions()
					return element.orbitals.filter(orbital => orbital.electronNumber > 0)
				}
			},
			methods: {
				calculate: function () {
					if (this.inputNumber < 1 || this.inputNumber > maxProtonNumber) {
						alert(`Proton number must be bigger than 0 and smaller than ${ maxProtonNumber + 1 }.`)
					} else if (this.inputNumber !== Math.floor(this.inputNumber)) {
						alert('Proton number must be an integer not a float.')
					} else {
						this.show = true
						this.protonNumber = this.inputNumber
					}
				}
			}
		})
	</script>
{/block}
